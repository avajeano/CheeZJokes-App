{"ast":null,"code":"var _jsxFileName = \"/Users/avaisaacson/Desktop/Code/react-jokes-classes/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\n// refactored functional component with hooks\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JokeList({\n  numJokesToGet = 5\n}) {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // retrieve jokes from the API when the component mounts\n  useEffect(() => {\n    getJokes();\n  }, []);\n\n  /* retrieve jokes from API */\n  async function getJokes() {\n    try {\n      let jokes = [];\n      let seenJokes = new Set();\n      while (jokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let joke = res.data;\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokes.push({\n            ...joke,\n            votes: 0\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n      setJokes(jokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /*  empty joke list, set to loading state, and then call getJokes */\n  function generateNewJokes() {\n    setIsLoading(true);\n    getJokes();\n  }\n\n  /* change vote for this id by delta ( + 1 or - 1) */\n  function vote(id, delta) {\n    setJokes(jokes => jokes.map(j => j.id === id ? {\n      ...j,\n      votes: j.votes + delta\n    } : j));\n  }\n\n  /* render: either loading spinner or list of sorted jokes */\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-4x fa-spinner fa-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: generateNewJokes,\n      children: \"Get New Jokes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), sortedJokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n      text: j.joke,\n      id: j.id,\n      votes: j.votes,\n      vote: vote\n    }, j.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(JokeList, \"+iu6xHPOscTV/FNdMPqy/q1M2A4=\");\n_c = JokeList;\nexport default JokeList;\n\n// old class component\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","seenJokes","Set","length","res","get","headers","Accept","joke","data","has","id","add","push","votes","console","log","err","error","generateNewJokes","vote","delta","map","j","sortedJokes","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","_c","$RefreshReg$"],"sources":["/Users/avaisaacson/Desktop/Code/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\n// refactored functional component with hooks\nfunction JokeList({ numJokesToGet = 5 }) {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // retrieve jokes from the API when the component mounts\n  useEffect(() => {\n    getJokes();\n  }, []);\n\n  /* retrieve jokes from API */\n  async function getJokes() {\n    try {\n      let jokes = [];\n      let seenJokes = new Set();\n\n      while (jokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept : \"application/json\" }\n        });\n        let joke = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokes.push({ ...joke, votes: 0 });\n        } else {\n          console.log(\"duplicate found!\")\n        }\n      }\n\n      setJokes(jokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /*  empty joke list, set to loading state, and then call getJokes */\n  function generateNewJokes() {\n    setIsLoading(true);\n    getJokes();\n  }\n\n  /* change vote for this id by delta ( + 1 or - 1) */\n  function vote(id, delta) {\n    setJokes(jokes =>\n      jokes.map(j => \n        j.id === id ? { ...j, votes: j.votes + delta} : j\n      )\n    );\n  }\n\n  /* render: either loading spinner or list of sorted jokes */\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n  if (isLoading) {\n    return (\n      <div className=\"loading\">\n        <i className=\"fas fa-4x fa-spinner fa-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"JokeList\">\n      <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n        Get New Jokes\n      </button>\n\n      {sortedJokes.map(j => (\n        <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n      ))}\n    </div>\n  );\n}\n\nexport default JokeList;\n\n// old class component\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}